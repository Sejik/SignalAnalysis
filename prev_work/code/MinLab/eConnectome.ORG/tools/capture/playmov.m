function varargout = playmov(varargin)
% playmov - play movie generated by eConnectome
%
% Usage: playmov(mov, figName)
%             
% Input: mov - the movie frames
%           figName - the name for the new figure
% 
% Description: the movie can be played in a new figure and 
% exported as AVI file. If the input argument mov is empty, 
% the AVI file for the movie must be imported before playing. 
%
% Program Author: Yakang Dai, University of Minnesota, USA
%
% User feedback welcome: e-mail: econnect@umn.edu
%

% License
% ==============================================================
% This program is part of the eConnectome.
% 
% Copyright (C) 2010 Regents of the University of Minnesota. All rights reserved.
% Correspondence: binhe@umn.edu
% Web: econnectome.umn.edu
%
% This program is free software for academic research: you can redistribute it and/or modify
% it for non-commercial uses, under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program. If not, see http://www.gnu.org/copyleft/gpl.html.
%
% This program is for research purposes only. This program
% CAN NOT be used for commercial purposes. This program 
% SHOULD NOT be used for medical purposes. The authors 
% WILL NOT be responsible for using the program in medical
% conditions.
% ==========================================

% Revision Logs
% ==========================================
%
% Yakang Dai, 29-Mar-2010 17:45:30
% Release Version 1.0
%
% ==========================================

% Begin initialization code - DO NOT EDIT
gui_Singleton = 0;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @playmov_OpeningFcn, ...
                   'gui_OutputFcn',  @playmov_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before playmov is made visible.
function playmov_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to playmov (see VARARGIN)

% Choose default command line output for playmov
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes playmov wait for user response (see UIRESUME)
% uiwait(handles.figure1);

set(hObject,'Menubar','none');
set(hObject,'Toolbar','none');
set(handles.imageaxes,'color',get(hObject,'color'));
axes(handles.imageaxes);
box off;
axis off;

if length(varargin) ~= 2
    warndlg('Input arguments mismatch!');
    return;
end

mov = varargin{1};
figName = varargin{2};

if ischar(figName)
    set(hObject,'Name',figName,'NumberTitle','off');
end

if isempty(mov)
    return;
end
setappdata(hObject,'movie',mov);

stop = 0;
setappdata(hObject,'stop',stop);
current = 1;
setappdata(hObject,'current',current);

img = mov(1).cdata;
set(handles.imageaxes,'color',get(hObject,'color'));
axes(handles.imageaxes);
image(img);
box off;
axis off;
axis image;

num = length(mov);
if num-1==0
    return;
else
    sliderstep = 1/(num-1);
end
set(handles.movslider,'min',1,'max',num,'sliderstep',[sliderstep sliderstep],'value',1);
set(handles.textmin,'string',['Min: ' num2str(1)]);
set(handles.textmax,'string',['Max: ' num2str(num)]);
set(handles.textcurrent,'string',['Current: ' num2str(current)]);

% --- Outputs from this function are returned to the command line.
function varargout = playmov_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --------------------------------------------------------------------
function menu_file_Callback(hObject, eventdata, handles)
% hObject    handle to menu_file (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function menu_importavi_Callback(hObject, eventdata, handles)
% hObject    handle to menu_importavi (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
[file, path] = uigetfile('*.avi', 'Select the AVI File');
if ~file
    return;
end

filename = fullfile(path, file);
mov = aviread(filename);
if isempty(mov)
    return;
end

hfig = gcf;
setappdata(hfig,'movie',mov);

stop = 0;
setappdata(hfig,'stop',stop);
current = 1;
setappdata(hfig,'current',current);

num = length(mov);
sliderstep = 1/(num-1);
set(handles.movslider,'min',1,'max',num,'sliderstep',[sliderstep sliderstep],'value',1);
set(handles.textmin,'string',['Min: ' num2str(1)]);
set(handles.textmax,'string',['Max: ' num2str(num)]);
set(handles.textcurrent,'string',['Current: ' num2str(current)]);

num = length(mov);
while 1
    for i = current:num
        if ~ishandle(hfig)
            return;
        end
        figure(hfig);
        stop = getappdata(hfig,'stop');
        if stop
            setappdata(hfig,'current',i);
            return;
        end
        img = mov(i).cdata;
        image(img);
        axis off;
        axis image;
        pause(0.1);
        set(handles.movslider,'value',i);
        set(handles.textcurrent,'string',['Current: ' num2str(i)]);
    end
    current = 1;
    pause(1);
end

% --------------------------------------------------------------------
function menu_exportavi_Callback(hObject, eventdata, handles)
% hObject    handle to menu_exportavi (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
[file, path] = uiputfile('movie.avi', 'Save the Movie');
if ~file
    return;
end
filename = fullfile(path, file);
mov = getappdata(gcf,'movie');
movie2avi(mov, filename, 'quality', 100, 'compression', 'None');


% --- Executes on slider movement.
function movslider_Callback(hObject, eventdata, handles)
% hObject    handle to movslider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

hfig = gcf;
mov = getappdata(hfig,'movie');
if isempty(mov)
    return;
end

stop = getappdata(hfig,'stop');
if ~stop
    return;
end

current = get(hObject,'value');
current = round(current);
set(hObject,'value',current);
setappdata(hfig, 'current',current);
set(handles.textcurrent,'string',['Current: ' num2str(current)]);
img = mov(current).cdata;
image(img);
axis off;
axis image;

% --- Executes during object creation, after setting all properties.
function movslider_CreateFcn(hObject, eventdata, handles)
% hObject    handle to movslider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes on button press in pb_play.
function pb_play_Callback(hObject, eventdata, handles)
% hObject    handle to pb_play (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
hfig = gcf;
mov = getappdata(hfig,'movie');
if isempty(mov)
    return;
end

current = getappdata(hfig, 'current');
stop = 0;
setappdata(hfig,'stop',stop);

num = length(mov);
while 1
    for i = current:num
        if ~ishandle(hfig)
            return;
        end
        figure(hfig);
        stop = getappdata(hfig,'stop');
        if stop
            setappdata(hfig,'current',i);
            return;
        end
        img = mov(i).cdata;
        image(img);
        axis off;
        axis image;
        pause(0.1);
        if ishandle(handles.movslider)
            set(handles.movslider,'value',i);
            set(handles.textcurrent,'string',['Current: ' num2str(i)]);
        end
    end
    current = 1;
    pause(1);    
end

% --- Executes on button press in pb_stop.
function pb_stop_Callback(hObject, eventdata, handles)
% hObject    handle to pb_stop (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
stop = 1;
setappdata(gcf,'stop',stop);


% --------------------------------------------------------------------
function menu_capframe_Callback(hObject, eventdata, handles)
% hObject    handle to menu_capframe (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
hfig = gcf;
mov = getappdata(hfig,'movie');
if isempty(mov)
    return;
end

stop = getappdata(hfig,'stop');
if ~stop
    return;
end

current = getappdata(hfig, 'current');
img = mov(current).cdata;

figure('Name','Export Current Frame','NumberTitle','off');
image(img);
axis off;
axis image;
