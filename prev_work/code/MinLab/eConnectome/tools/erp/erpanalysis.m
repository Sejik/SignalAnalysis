function varargout = erpanalysis(varargin)
% erpanalysis - ERP/ERF analysis of EEG/ECoG/MEG data
% 
% Usage: ECOM = erpanalysis(ERP)
%             or call erpanalysis(ERP) to start the popup window with ERP structure. 
%
% Input: ERP - is an EEG/ECoG/MEG structure with event field, where ERP.event
%                      stores the information for events.  
%
% Output: ECOM - is an EEG/ECoG/MEG structure storing the data generated by ERP/ERF analysis.
% 
% Please see the eConnectome Manual 
% (via 'Menu bar -> Help -> Manual' in the main econnectome GUI)
% for details on the EEG/ECoG/MEG structure.
%
% Program Author: Yakang Dai, University of Minnesota, USA
%
% User feedback welcome: e-mail: econnect@umn.edu
%

% License
% ==============================================================
% This program is part of the eConnectome.
% 
% Copyright (C) 2010 Regents of the University of Minnesota. All rights reserved.
% Correspondence: binhe@umn.edu
% Web: econnectome.umn.edu
%
% This program is free software for academic research: you can redistribute it and/or modify
% it for non-commercial uses, under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program. If not, see http://www.gnu.org/copyleft/gpl.html.
%
% This program is for research purposes only. This program
% CAN NOT be used for commercial purposes. This program 
% SHOULD NOT be used for medical purposes. The authors 
% WILL NOT be responsible for using the program in medical
% conditions.
% ==========================================

% Revision Logs
% ==========================================
%
% Yakang Dai, 08-Feb-2011 11:26:30
% Support MEG
%
% Yakang Dai, 20-Apr-2010 15:20:30
% Release Version 1.0
%
% ========================================== 

% --- Begin initialization code - DO NOT EDIT
gui_Singleton = 0;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @erpanalysis_OpeningFcn, ...
                   'gui_OutputFcn',  @erpanalysis_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% --- End initialization code - DO NOT EDIT


% --- Executes just before erpanalysis is made visible.
function erpanalysis_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to erpanalysis (see VARARGIN)

% Choose default command line output for erpanalysis
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes erpanalysis wait for user response (see UIRESUME)
% uiwait(handles.erpanalysis);

set(hObject,'Toolbar','none');
set(hObject,'Menubar','none');
bkgclr = get(handles.uipanelaverage,'backgroundcolor');
set(hObject,'color',bkgclr);
axes(handles.mainaxes);
set(handles.mainaxes,'color',get(hObject,'color'));

if length(varargin) ~= 1
    warndlg('Input arguments mismatch!');
    return;
end

ERP = varargin{1};
ERP = isecom(ERP);
if isempty(ERP)
    warndlg('Input ERP is not right!'); 
    return;
end

numevent = length(ERP.event);
for i = 1: numevent
    eventnames(i,1) = {ERP.event(i).name};
end
set(handles.popmenu_stimulation,'string',eventnames);

setappdata(hObject,'ERP',ERP);
ECOM = [];
setappdata(hObject,'ECOM',ECOM);
scale = 1;
setappdata(hObject,'SCALE', scale);
cMask = [0,0];
setappdata(hObject,'cMask', cMask);
masks = [];
setappdata(hObject,'masks',masks);
masking = 0;
setappdata(hObject,'masking',masking);

options.left = 1;
options.right = ERP.points;
options.av_start = 0;
options.av_end = 1000;
options.eventidx = 1;
setappdata(hObject, 'options', options);
set(handles.averagestart,'string',num2str(options.av_start/ERP.srate));
set(handles.averageend,'string',num2str(options.av_end/ERP.srate));

initwindow;

ischanged = 0;
setappdata(hObject,'ischanged',ischanged);

setappdata(hObject, 'current',0);

set(hObject,'WindowButtonDownFcn', @mousebuttondownCallback); 
set(hObject,'windowbuttonmotionfcn', @mousemotionCallback);
set(hObject,'WindowButtonUpFcn', @mousebuttonupCallback); 
set(hObject,'WindowScrollWheelFcn', @mousescrollwheelCallback);

uiwait(hObject);% To block OutputFcn so that let other callbacks to generate values.

% --- Outputs from this function are returned to the command line.
function varargout = erpanalysis_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = getappdata(hObject, 'ECOM');
delete(hObject);


% --- Executes when user attempts to close erpanalysis.
function erpanalysis_CloseRequestFcn(hObject, eventdata, handles)
% hObject    handle to erpanalysis (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
ECOM =[];
setappdata(hObject, 'ECOM', ECOM);
setappdata(hObject,'ERP',[]);
uiresume(hObject);
% delete(hObject);

% --- Executes during object creation, after setting all properties.
function erpanalysis_CreateFcn(hObject, eventdata, handles)
% hObject    handle to erpanalysis (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called


% % --- Executes on button press in pushbuttonepoch.
% function pushbuttonepoch_Callback(hObject, eventdata, handles)
% % hObject    handle to pushbuttonepoch (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)


function channelstodisplay_Callback(hObject, eventdata, handles)
% hObject    handle to channelstodisplay (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of channelstodisplay as text
%        str2double(get(hObject,'String')) returns contents of channelstodisplay as a double


% --- Executes during object creation, after setting all properties.
function channelstodisplay_CreateFcn(hObject, eventdata, handles)
% hObject    handle to channelstodisplay (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in whichtimeleft.
function whichtimeleft_Callback(hObject, eventdata, handles)
% hObject    handle to whichtimeleft (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
     

ERP = getappdata(gcf,'ERP');

if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

axisdata = get(handles.mainaxes, 'userdata');

% the region for displaying
 xlow = axisdata.xlow - axisdata.xlabelstep;
 xhigh = axisdata.xhigh - axisdata.xlabelstep;

 % to the end of the eeg frames, do nothing
 if xhigh <=1
     msgbox('Reach the left end of the ERP data!','','help','modal');
     return;
 end

 if xlow <1 
     xlow = 1;
     xhigh = axisdata.xlimit;
 end 

axisdata.xlow = xlow;
axisdata.xhigh = xhigh;

set(handles.mainaxes, 'userdata',axisdata);
updatewindow;
     
% --- Executes on button press in whichtimelefter.
function whichtimelefter_Callback(hObject, eventdata, handles)
% hObject    handle to whichtimelefter (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

ERP = getappdata(gcf,'ERP');

if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

 axisdata = get(handles.mainaxes, 'userdata');

 xlow = axisdata.xlow - axisdata.xlimit;
 xhigh = axisdata.xhigh - axisdata.xlimit;

 % to the end of the eeg frames, do nothing
 if xhigh <=1
     msgbox('Reach the left end of the ERP data!','','help','modal');
     return;
 end

 if xlow <1 
     xlow = 1;
     xhigh = axisdata.xlimit;
 end

axisdata.xlow = xlow;
axisdata.xhigh = xhigh;

set(handles.mainaxes, 'userdata',axisdata);
updatewindow;

% --- Executes on button press in whichtimeright.
function whichtimeright_Callback(hObject, eventdata, handles)
% hObject    handle to whichtimeright (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

ERP = getappdata(gcf,'ERP');
 
if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

axisdata = get(handles.mainaxes, 'userdata');

% the region for displaying
 xlow = axisdata.xlow + axisdata.xlabelstep;
 xhigh = axisdata.xhigh + axisdata.xlabelstep;

 % to the end of the eeg frames, do nothing
 if xlow >= ERP.points
     msgbox('Reach the right end of the ERP data!','','help','modal');
     return;
 end

 if xhigh > ERP.points 
     xhigh = ERP.points;
     xlow = ERP.points - axisdata.xlimit + 1;
 end

axisdata.xlow = xlow;
axisdata.xhigh = xhigh;

set(handles.mainaxes, 'userdata',axisdata);
updatewindow;     

% --- Executes on button press in whichtimerighter.
function whichtimerighter_Callback(hObject, eventdata, handles)
% hObject    handle to whichtimerighter (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

ERP = getappdata(gcf,'ERP');
 
if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

axisdata = get(handles.mainaxes, 'userdata');

% the region for displaying
 xlow = axisdata.xlow + axisdata.xlimit;
 xhigh = axisdata.xhigh + axisdata.xlimit;

 % to the end of the eeg frames, do nothing
 if xlow >= ERP.points
     msgbox('Reach the right end of the ERP data!','','help','modal');
     return;
 end

 if xhigh > ERP.points 
     xhigh = ERP.points;
     xlow = ERP.points - axisdata.xlimit + 1;
 end

axisdata.xlow = xlow;
axisdata.xhigh = xhigh;

set(handles.mainaxes, 'userdata',axisdata);
updatewindow;     

% --- Executes on button press in whichchannelszoomin.
function whichchannelszoomin_Callback(hObject, eventdata, handles)
% hObject    handle to whichchannelszoomin (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

ERP = getappdata(gcf,'ERP');

if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

if ERP.dispchans == 1
    msgbox('Reach the max zoom!','','help','modal');
    return;
end

if ERP.dispchans - 4 < 1
    ERP.dispchans = 1;
else
    ERP.dispchans = ERP.dispchans - 4;
end

ERP.end = ERP.start + ERP.dispchans - 1;
set(handles.channelstodisplay, 'string', num2str(ERP.dispchans));
setappdata(gcf,'ERP',ERP);

updatewindow;        

% --- Executes on button press in whichchannelszoomout.
function whichchannelszoomout_Callback(hObject, eventdata, handles)
% hObject    handle to whichchannelszoomout (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

ERP = getappdata(gcf,'ERP');
 
if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

if ERP.dispchans == ERP.nbchan
    msgbox('Reach the min zoom!','','help','modal');
    return;
end

if ERP.dispchans + 4 > ERP.nbchan
    ERP.dispchans = ERP.nbchan;
else
    ERP.dispchans = ERP.dispchans + 4;
end

% if start is 1, then extend from 1,
% if start is more than 1, then extend from end.
if ERP.start == 1
    ERP.end = ERP.start + ERP.dispchans - 1;
else
    ERP.start = ERP.end - ERP.dispchans + 1;
end

set(handles.channelstodisplay, 'string', num2str(ERP.dispchans));
setappdata(gcf,'ERP',ERP);

updatewindow;     

% --- Executes on button press in whichtimeleftest.
function whichtimeleftest_Callback(hObject, eventdata, handles)
% hObject    handle to whichtimeleftest (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

ERP = getappdata(gcf,'ERP');
    
if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

axisdata = get(handles.mainaxes, 'userdata');

axisdata.xlow = 1;
axisdata.xhigh = axisdata.xlimit;
set(handles.mainaxes, 'userdata',axisdata);
updatewindow;     

% --- Executes on button press in whichtimerightest.
function whichtimerightest_Callback(hObject, eventdata, handles)
% hObject    handle to whichtimerightest (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

ERP = getappdata(gcf,'ERP');
    
if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

axisdata = get(handles.mainaxes, 'userdata');

axisdata.xhigh = ERP.points;
axisdata.xlow = ERP.points - axisdata.xlimit + 1;
set(handles.mainaxes, 'userdata',axisdata);
updatewindow;            

% --- Executes on button press in whichtimeleftauto.
function whichtimeleftauto_Callback(hObject, eventdata, handles)
% hObject    handle to whichtimeleftauto (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

ERP = getappdata(gcf,'ERP');
   
if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

axisdata = get(handles.mainaxes, 'userdata');

 xlow = axisdata.xlow - axisdata.xlabelstep;
 xhigh = axisdata.xhigh - axisdata.xlabelstep;

 % to the end of the eeg frames, do nothing
 if xhigh <=1
     msgbox('Reach the left end of the ERP data!','','help','modal');
     return;
 end

 if xlow <1 
     xlow = 1;
     xhigh = axisdata.xlimit;
 end

axisdata.xlow = xlow;
axisdata.xhigh = xhigh;
set(handles.mainaxes, 'userdata',axisdata);
updatewindow; 

 if xlow == 1 | axisdata.auto == 1
     axisdata.auto = 0;
     set(handles.mainaxes, 'userdata', axisdata);
     return;
 else
     pause(0.2);
     whichtimeleftauto_Callback(hObject, eventdata, handles);
 end
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

% --- Executes on button press in whichtimerightauto.
function whichtimerightauto_Callback(hObject, eventdata, handles)
% hObject    handle to whichtimerightauto (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

ERP = getappdata(gcf,'ERP');
    
if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

axisdata = get(handles.mainaxes, 'userdata');

 xlow = axisdata.xlow + axisdata.xlabelstep;
 xhigh = axisdata.xhigh + axisdata.xlabelstep;

 % to the end of the eeg frames, do nothing
 if xlow >= ERP.points
     msgbox('Reach the right end of the ERP data!','','help','modal');
     return;
 end

 if xhigh > ERP.points 
     xhigh = ERP.points;
     xlow = ERP.points - axisdata.xlimit + 1;
 end    

axisdata.xlow = xlow;
axisdata.xhigh = xhigh;
set(handles.mainaxes, 'userdata',axisdata);
updatewindow; 

 if xhigh == ERP.points | axisdata.auto == 1
     axisdata.auto = 0;
     set(handles.mainaxes, 'userdata', axisdata);
     return;
 else
     pause(0.2);
     whichtimerightauto_Callback(hObject, eventdata, handles);
 end
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 


% --- If Enable == 'on', executes on mouse press in 5 pixel border.
% --- Otherwise, executes on mouse press in 5 pixel border or over whichtimeleftauto.
function whichtimeleftauto_ButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to whichtimeleftauto (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

axisdata = get(handles.mainaxes, 'userdata');
axisdata.auto = 1;
set(handles.mainaxes, 'userdata', axisdata);


% --- If Enable == 'on', executes on mouse press in 5 pixel border.
% --- Otherwise, executes on mouse press in 5 pixel border or over whichtimerightauto.
function whichtimerightauto_ButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to whichtimerightauto (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

axisdata = get(handles.mainaxes, 'userdata');
axisdata.auto = 1;
set(handles.mainaxes, 'userdata', axisdata);


% --- Executes on button press in whichchannelsup.
function whichchannelsup_Callback(hObject, eventdata, handles)
% hObject    handle to whichchannelsup (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

ERP = getappdata(gcf,'ERP');
    
if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

if ERP.start == 1
    msgbox('Reach the first channel!','','help','modal');
    return;
end

if ERP.start - 4 < 1
    ERP.start = 1;
else
    ERP.start = ERP.start - 4;
end

ERP.end = ERP.start + ERP.dispchans - 1;

setappdata(gcf,'ERP',ERP);

updatewindow; 
 
% --- Executes on button press in whichchannelsdown.
function whichchannelsdown_Callback(hObject, eventdata, handles)
% hObject    handle to whichchannelsdown (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

ERP = getappdata(gcf,'ERP');
    
if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

if ERP.end == ERP.nbchan
    msgbox('Reach the last channel!','','help','modal');
    return;
end

if ERP.end + 4 > ERP.nbchan
    ERP.end = ERP.nbchan;
else
    ERP.end = ERP.end + 4;
end

ERP.start = ERP.end - ERP.dispchans + 1;  

setappdata(gcf,'ERP',ERP);

updatewindow;  


%--------------------------------------------------------------------------
function mousemotionCallback(src, evnt) 
hfig = gcf;
ERP = getappdata(hfig,'ERP');
mainaxes = findobj(hfig,'tag','mainaxes'); 
textChannel = findobj(hfig,'tag','textChannel');
textTime = findobj(hfig,'tag','textTime');
textValue = findobj(hfig,'tag','textValue');
if isempty(mainaxes)
    return;
end

currentxlim = get(mainaxes, 'Xlim');
currentylim = get(mainaxes, 'Ylim');
mousepos = get(mainaxes, 'currentpoint');

% if the mouse is not in the viewing window.
if mousepos(1,1) < currentxlim(1,1) | mousepos(1,1) > currentxlim(1,2)  | ...
mousepos(1,2) < currentylim(1,1) | mousepos(1,2) > currentylim(1,2) 
     return;
end

scale = getappdata(hfig,'SCALE');    
axisdata = get(mainaxes, 'userdata');
if isempty(axisdata)
    return;
end
currentpoint = round(mousepos(1,1) + axisdata.xlow-1);%find the nearest point.
if currentpoint < axisdata.xlow | currentpoint > axisdata.xhigh
    return;
end

masking = getappdata(hfig,'masking');

% update the pointer and channel information if masking is not performed, 
% otherwise update the mask.
if ~masking
    % update the channel information
    currenttime = currentpoint / ERP.srate;
    xpos = currentpoint - axisdata.xlow +1;
    currentchannel = round( (currentylim(1,2) - mousepos(1,2) ) / axisdata.spacing);%find the nearest channel.
    currentchannel = currentchannel + ERP.start - 1;
    if currentchannel < ERP.start | currentchannel > ERP.end
%          set(textChannel, 'string', ['Channel: ' num2str(0)]);
%          set(textTime, 'string', ['Time: ' num2str(0)]);
%          set(textValue, 'string', ['Value: ' num2str(0)]);
         return;
    end
    currentvalue = ERP.data(currentchannel, currentpoint);
    set(textChannel,'string', ['Channel: ' ERP.labels{currentchannel}]);
    set(textTime,'string', ['Time: ' num2str(currenttime) ' s']);
    set(textValue,'string', ['Value: ' num2str(currentvalue) ' ' ERP.unit]);

    % update the pointer
    i = ERP.end - currentchannel + 1;
    x = xpos(1);
    currentvalue = currentvalue - mean(ERP.data(currentchannel,axisdata.xlow:axisdata.xhigh));
    y = currentvalue*scale+i*axisdata.spacing;
    pointhandle = findobj(hfig,'tag','pointhandle');
    if isempty(pointhandle)
        plot(x,y,'mo','MarkerFaceColor',[0.49,1.0,0.63],'MarkerSize',8,'EraseMode', 'xor','tag', 'pointhandle');
    else
        set(pointhandle,'xdata',x,'ydata',y);
        drawnow;
    end
else
    % update the mask
    cMask = getappdata(hfig, 'cMask');
    cMask(2) = currentpoint;
    setappdata(hfig, 'cMask', cMask);
    x = cMask(1) - axisdata.xlow +1;
    y = currentylim(1,1);
    w = cMask(2) - cMask(1);
    h = currentylim(1,2);
    if w <= 0
        return;
    end
    tMask = findobj(hfig,'tag','tMask');
    if isempty(tMask)
        rectangle('Position', [x,y,w,h],'EraseMode', 'xor', 'tag', 'tMask', 'FaceColor',[0.5,0.5,0.5]);
    else
        set(tMask,'Position', [x,y,w,h]);
        drawnow;
    end
end


%--------------------------------------------------------------------
function mousebuttondownCallback(src, evnt) 
hfig = gcf;
ERP = getappdata(hfig,'ERP');        
mainaxes = findobj(hfig,'tag','mainaxes'); 
if isempty(mainaxes)
    return;
end

currentxlim = get(mainaxes, 'Xlim');
currentylim = get(mainaxes, 'Ylim');
mousepos = get(mainaxes, 'currentpoint');
     
% if the mouse is not in the viewing window, topography nothing.
if mousepos(1,1) < currentxlim(1,1) | mousepos(1,1) > currentxlim(1,2)  | ...
   mousepos(1,2) < currentylim(1,1) | mousepos(1,2) > currentylim(1,2) 
       return;
end

axisdata = get(mainaxes, 'userdata');
currentpoint = round(mousepos(1,1) + axisdata.xlow-1);%find the nearest point.
if currentpoint < axisdata.xlow | currentpoint > axisdata.xhigh
    return;
end

% currenttime = currentpoint / ERP.srate;
% temppos = currentpoint - axisdata.xlow +1;
% xpos = [temppos,  temppos];
% ypos = [currentylim(1,1),  currentylim(1,2)];
% currentchannel = round( (currentylim(1,2) - mousepos(1,2) ) / axisdata.spacing );%find the nearest channel.
% currentchannel = currentchannel + ERP.start - 1;

selectype = lower(get(hfig,'SelectionType'));

% 'normal': left click - select the start of the current mask
if strcmp(selectype,'normal')
    cMask = getappdata(hfig, 'cMask');
    cMask(1) = currentpoint;
    setappdata(hfig, 'cMask',cMask);
    setappdata(hfig,'masking',1);
    return;
end

% 'alt': right click - show the popup menu
if strcmp(selectype,'alt')    
    popmenu_mainaxes = findobj(hfig,'tag','popmenu_mainaxes');
    position = get(hfig,'CurrentPoint');
    set(popmenu_mainaxes,'position',position);
    set(popmenu_mainaxes,'Visible','on');
    setappdata(hfig,'current',currentpoint);
    return;
end 


%--------------------------------------------------------------------
function mousebuttonupCallback(src, evnt) 
hfig = gcf;
ERP = getappdata(hfig,'ERP');        
mainaxes = findobj(hfig,'tag','mainaxes'); 
if isempty(mainaxes)
    return;
end

currentxlim = get(mainaxes, 'Xlim');
currentylim = get(mainaxes, 'Ylim');
mousepos = get(mainaxes, 'currentpoint');
     
% if the mouse is not in the viewing window, topography nothing.
if mousepos(1,1) < currentxlim(1,1) | mousepos(1,1) > currentxlim(1,2)  | ...
   mousepos(1,2) < currentylim(1,1) | mousepos(1,2) > currentylim(1,2) 
       return;
end

axisdata = get(mainaxes, 'userdata');
currentpoint = round(mousepos(1,1) + axisdata.xlow-1);%find the nearest point.
if currentpoint < axisdata.xlow | currentpoint > axisdata.xhigh
    return;
end

selectype = lower(get(hfig,'SelectionType'));

% 'normal': left click - end the current mask
if ~strcmp(selectype,'normal')
    return;
end

cMask = getappdata(hfig, 'cMask');
cMask(2) = currentpoint;
setappdata(hfig, 'cMask',cMask);
setappdata(hfig,'masking',0);

if cMask(2) - cMask(1) <= 2
    return;
end

% endevent = questdlg('Record the mask ?','','Yes','Cancel','Cancel');
% if ~strcmp(endevent, 'Yes')
%     updatewindow;
%     return;
% end

masks = getappdata(hfig, 'masks');
num = size(masks,1);
if num <= 0
    masks(1,:) =  cMask;
else
    masks(num+1,:) = cMask;
end

A = masks(:,1);
[B,IX] = sort(A);
masks = masks(IX,:);

setappdata(hfig, 'masks', masks);
updatewindow;


%--------------------------------------------------------------------
function mousescrollwheelCallback(src, evnt)
hfig = gcf;
ERP = getappdata(hfig,'ERP');
        
mainaxes = findobj(hfig,'tag','mainaxes'); 
if isempty(mainaxes)
    return;
end
     
currentxlim = get(mainaxes, 'Xlim');
currentylim = get(mainaxes, 'Ylim');
mousepos = get(mainaxes, 'currentpoint');
     
% if the mouse is not in the viewing window, topography nothing.
if mousepos(1,1) < currentxlim(1,1) | mousepos(1,1) > currentxlim(1,2)  | ...
   mousepos(1,2) < currentylim(1,1) | mousepos(1,2) > currentylim(1,2) 
       return;
end

if isempty(ERP) | isempty(ERP.data)
    helpdlg('Please import ERP data!');
    return;
end

scale = getappdata(hfig,'SCALE');
if evnt.VerticalScrollCount < 0 
    scale = scale + 0.25;
elseif evnt.VerticalScrollCount > 0
    scale = scale - 0.25;
    if scale < 0
        return;
    end
end
setappdata(hfig,'SCALE',scale);
updatewindow;

% --------------------------------------------------------------------
% update the view window for the ERP data
function updatewindow()
hfig = gcf;
ERP = getappdata(hfig,'ERP');
if isempty(ERP)
    return;
end

mainaxes = findobj(hfig,'tag','mainaxes');

scale = getappdata(hfig,'SCALE');    

axisdata = get(mainaxes, 'userdata');
xlow = axisdata.xlow;
xhigh = axisdata.xhigh;
xlimit = axisdata.xlimit;
xlabelstep = axisdata.xlabelstep;
    
% x labels
xlabelpositions = [0:xlabelstep:xlimit];
xlabels = [xlow-1:xlabelstep:xhigh] ./ ERP.srate;
xlabels = num2str(xlabels');
     
% y labels
channelmaxs = max(ERP.data(ERP.start:ERP.end,xlow:xhigh)');
channelmins = min(ERP.data(ERP.start:ERP.end,xlow:xhigh)');    
spacing = mean(channelmaxs-channelmins);  
ylimit = (ERP.dispchans+1)*spacing;
ylabelpositions = [0:spacing:ERP.dispchans*spacing];    
YLabels = ERP.labels(ERP.start:ERP.end);
YLabels = strvcat(YLabels); 
YLabels = flipud(str2mat(YLabels,' '));

axisdata.spacing = spacing;
set(mainaxes, 'userdata', axisdata);

set(mainaxes,...
      'Xlim',[0 xlimit],...
      'xtick',xlabelpositions,...% where to display the labels.
      'Ylim',[0 ylimit],...
      'YTick',ylabelpositions,...
      'YTickLabel', YLabels,...
      'XTickLabel', xlabels); % the labels to be displayed
  
axes(mainaxes);     
cla;        
hold on;

% draw waveforms
badcolor = [1.0,0.0,0.0];
goodcolor = [0.0,0.0,1.0];
for i = 1:ERP.dispchans
    chan = ERP.end-i+1;
    isbad = find(ERP.bad==chan);
    if isbad
        tmpcolor = badcolor;
    else
        tmpcolor = goodcolor;
    end
    
    meandata = mean(ERP.data(chan,xlow:xhigh));
    data = ERP.data(chan,xlow:xhigh) - meandata;
    plot(scale*data+i*spacing,'color', tmpcolor, 'clipping','on');
    
    % plot(scale*ERP.data(chan,xlow:xhigh)+i*spacing,'color', tmpcolor, 'clipping','on');
end 

% draw events 
numevents = length(ERP.event);
clrmap = lines(numevents);
ypos = [0, ylimit];
for i = 1:numevents
    tmpcolor = clrmap(i,:);
    name = ERP.event(i).name;
    time = ERP.event(i).time;
    numtime = length(time);
    for j = 1:numtime
        if time(j)>=axisdata.xlow && time(j)<=axisdata.xhigh
            x = time(j)-xlow+1;
            xpos = [x, x];
            % plot(xpos, ypos, '--', 'color', tmpcolor);
            plot(xpos, ypos, '--', 'color', [0,0,0]);
            text(double(x),double(ylimit),name, 'HorizontalAlignment','center','VerticalAlignment','bottom','Color',tmpcolor,'FontWeight','bold','FontSize',12);
        end
    end
end

% % draw interval 
% options = getappdata(hfig,'options');
% left = options.left-xlow +1;
% xpos = [left,left];
% leftline = findobj(hfig,'tag','leftline');
% if isempty(leftline)
%     plot(xpos, ypos, '--', 'EraseMode', 'xor', 'color', [0,0,1],'tag','leftline');
% else
%     set(leftline,'xdata',xpos,'ydata',ypos);
% end
% right = options.right-xlow +1;
% xpos = [right,right];
% rightline = findobj(hfig,'tag','rightline');
% if isempty(rightline)
%     plot(xpos, ypos, '--', 'EraseMode', 'xor', 'color', [1,0,0],'tag','rightline');
% else
%     set(rightline,'xdata',xpos,'ydata',ypos);
% end


% draw masks
masks = getappdata(hfig, 'masks');
num = size(masks,1);
if num <= 0
    return;
end

y = 0;
h = ylimit;
for i = 1:num
    cMask = masks(i,:);
    
    % display the portion in the window
    cMask(1) = max(cMask(1), xlow);
    cMask(2) = min(cMask(2), xhigh);
    
    x = cMask(1) - xlow +1;
    w = cMask(2) - cMask(1); 
    if  w>0
        rectangle('Position', [x,y,w,h], 'EraseMode', 'xor', 'FaceColor', [0.5,0.5,0.5]);
        text(double(x+w/2), double(y+h/2), num2str(i), 'HorizontalAlignment','center','VerticalAlignment','middle','FontWeight','bold','FontSize',12,'BackgroundColor',[0.7, 1.0, 0.7]);
    end
end


% --------------------------------------------------------------------
function initwindow
hfig = gcf; 
ERP = getappdata(hfig,'ERP');
if isempty(ERP)
    return;
end

mainaxes = findobj(hfig, 'tag','mainaxes'); 
channelstodisplay = findobj(hfig, 'tag','channelstodisplay'); 

xlimit = 2000; % the limitation in the x axis.
if xlimit > ERP.points
   xlimit = ERP.points;
end               
    
axisdata.xlow = 1;
axisdata.xhigh = xlimit;
axisdata.auto = 0;
axisdata.frame = 1;
axisdata.xlimit = xlimit;
xlabelstep = round(xlimit/10);% only display 10 labels in x axis.
if xlabelstep == 0
    xlabelstep = 1;
end
axisdata.xlabelstep = xlabelstep;
    
ERP.start = 1;
ERP.end = ERP.nbchan;
ERP.dispchans = ERP.nbchan;    
  
set(mainaxes, 'userdata', axisdata);
set(channelstodisplay, 'string', num2str(ERP.nbchan));
setappdata(hfig,'ERP',ERP);

updatewindow;


% --------------------------------------------------------------------
function popmenu_mainaxes_Callback(hObject, eventdata, handles)
% hObject    handle to popmenu_mainaxes (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



% --- Executes on button press in pushbuttonok.
function pushbuttonok_Callback(hObject, eventdata, handles)
% hObject    handle to pushbuttonok (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
hfig = gcf;
setappdata(hfig,'ERP',[]);
uiresume(hfig);

% --- Executes on button press in pushbuttoncancel.
function pushbuttoncancel_Callback(hObject, eventdata, handles)
% hObject    handle to pushbuttoncancel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
hfig = gcf;
ECOM = [];
setappdata(hfig,'ECOM',ECOM);
setappdata(hfig,'ERP',[]);
uiresume(hfig);

function averagestart_Callback(hObject, eventdata, handles)
% hObject    handle to averagestart (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of averagestart as text
%        str2double(get(hObject,'String')) returns contents of averagestart as a double
hfig = gcf;
options = getappdata(hfig,'options');
av_start = str2num(get(hObject,'string'));
if isempty(av_start)
    warndlg('Input is not numerical !');
    return;
end
ERP = getappdata(hfig,'ERP');

old_av_start = options.av_start/ERP.srate;
options.av_start = round(av_start*ERP.srate);

if  options.av_start >= options.av_end
    helpdlg('Left limit must < Right limit!');
    set(hObject,'string',num2str(old_av_start));
    return;
end

av_start = options.av_start/ERP.srate;
set(hObject,'string',num2str(av_start));
setappdata(hfig,'options',options);

% --- Executes during object creation, after setting all properties.
function averagestart_CreateFcn(hObject, eventdata, handles)
% hObject    handle to averagestart (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% -------------------------------------------------------------------------
function averageend_Callback(hObject, eventdata, handles)
% hObject    handle to averageend (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of averageend as text
%        str2double(get(hObject,'String')) returns contents of averageend as a double
hfig = gcf;
options = getappdata(hfig,'options');
av_end = str2num(get(hObject,'string'));
if isempty(av_end)
    warndlg('Input is not numerical !');
    return;
end
ERP = getappdata(hfig,'ERP');

old_av_end = options.av_end/ERP.srate;
options.av_end = round(av_end*ERP.srate);

if  options.av_end <= options.av_start
    helpdlg('Right limit must > Left limit!');
    set(hObject,'string',num2str(old_av_end));
    return;
end

av_end = options.av_end/ERP.srate;
set(hObject,'string',num2str(av_end));
setappdata(hfig,'options',options);


% --- Executes during object creation, after setting all properties.
function averageend_CreateFcn(hObject, eventdata, handles)
% hObject    handle to averageend (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% function baselinestart_Callback(hObject, eventdata, handles)
% % hObject    handle to baselinestart (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% 
% % Hints: get(hObject,'String') returns contents of baselinestart as text
% %        str2double(get(hObject,'String')) returns contents of baselinestart as a double
% hfig = gcf;
% options = getappdata(hfig,'options');
% ERP = getappdata(hfig,'ERP');
% bl_start = str2num(get(hObject,'string'));
% if isempty(bl_start)
%     warndlg('Input is not numerical !');
%     return;
% end
% 
% % old_bl_start = options.bl_start/ERP.srate;
% options.bl_start = round(bl_start*ERP.srate);
% options.bl_start = max(min(options.bl_start,ERP.points),1);
% 
% % if options.bl_start >= options.bl_end
% %     helpdlg('Left limit must < Right limit!');
% %     set(hObject,'string',num2str(old_bl_start));
% %     return;
% % end
% 
% bl_start = options.bl_start/ERP.srate;
% set(hObject,'string',num2str(bl_start));
% setappdata(hfig,'options',options);
% 
% % draw epoch 
% mainaxes = findobj(hfig,'tag','mainaxes');
% axisdata = get(mainaxes, 'userdata');
% currentylim = get(mainaxes, 'Ylim');
% bl_start = options.bl_start-axisdata.xlow +1;
% xpos = [bl_start,bl_start];
% ypos = [currentylim(1,1), currentylim(1,2)];
% leftline = findobj(hfig,'tag','leftline');
% if isempty(leftline)
%     plot(xpos, ypos, '--', 'EraseMode', 'xor', 'color', [0,0,1],'tag','leftline');
% else
%     set(leftline,'xdata',xpos,'ydata',ypos);
% end

% % --- Executes during object creation, after setting all properties.
% function baselinestart_CreateFcn(hObject, eventdata, handles)
% % hObject    handle to baselinestart (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    empty - handles not created until after all CreateFcns called
% 
% % Hint: edit controls usually have a white background on Windows.
% %       See ISPC and COMPUTER.
% if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
%     set(hObject,'BackgroundColor','white');
% end



% function baselineend_Callback(hObject, eventdata, handles)
% % hObject    handle to baselineend (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% 
% % Hints: get(hObject,'String') returns contents of baselineend as text
% %        str2double(get(hObject,'String')) returns contents of baselineend as a double
% hfig = gcf;
% options = getappdata(hfig,'options');
% ERP = getappdata(hfig,'ERP');
% bl_end = str2num(get(hObject,'string'));
% if isempty(bl_end)
%     warndlg('Input is not numerical !');
%     return;
% end
% 
% % old_bl_end = options.bl_end/ERP.srate;
% options.bl_end = round(bl_end*ERP.srate);
% options.bl_end = max(min(options.bl_end,ERP.points),1);
% 
% % if  options.bl_end <= options.bl_start
% %     helpdlg('Right limit must > Left limit!');
% %     set(hObject,'string',num2str(old_bl_end));    
% %     return;
% % end
% 
% bl_end = options.bl_end/ERP.srate;
% set(hObject,'string',num2str(bl_end));
% setappdata(hfig,'options',options);
% 
% % draw epoch 
% mainaxes = findobj(hfig,'tag','mainaxes');
% axisdata = get(mainaxes, 'userdata');
% currentylim = get(mainaxes, 'Ylim');
% bl_end = options.bl_end-axisdata.xlow +1;
% xpos = [bl_end,bl_end];
% ypos = [currentylim(1,1), currentylim(1,2)];
% rightline = findobj(hfig,'tag','rightline');
% if isempty(rightline)
%     plot(xpos, ypos, '--', 'EraseMode', 'xor', 'color', [0,0,1],'tag','rightline');
% else
%     set(rightline,'xdata',xpos,'ydata',ypos);
% end

% % --- Executes during object creation, after setting all properties.
% function baselineend_CreateFcn(hObject, eventdata, handles)
% % hObject    handle to baselineend (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    empty - handles not created until after all CreateFcns called
% 
% % Hint: edit controls usually have a white background on Windows.
% %       See ISPC and COMPUTER.
% if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
%     set(hObject,'BackgroundColor','white');
% end


% --- Executes on selection change in popmenu_stimulation.
function popmenu_stimulation_Callback(hObject, eventdata, handles)
% hObject    handle to popmenu_stimulation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns popmenu_stimulation contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popmenu_stimulation
hfig = gcf;
options = getappdata(hfig,'options');
eventidx = get(hObject,'value');
options.eventidx = eventidx;
setappdata(hfig,'options',options);

% --- Executes during object creation, after setting all properties.
function popmenu_stimulation_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popmenu_stimulation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



% --- Executes on button press in pb_extract.
function pb_extract_Callback(hObject, eventdata, handles)
% hObject    handle to pb_extract (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
hfig = gcf;
ERP = getappdata(hfig,'ERP');
EPOCH = buildEpoch(ERP);
% ECOM = ecom_initialize;
% ECOM.name = ERP.name;
% ECOM.type = ERP.type;
% ECOM.nbchan = ERP.nbchan;
% ECOM.unit = ERP.unit;
% ECOM.srate = ERP.srate;
% ECOM.labeltype = ERP.labeltype;
% ECOM.labels = ERP.labels;
% ECOM.locations  = ERP.locations;
% ECOM.data = [];
% ECOM.start = ERP.start;
% ECOM.end = ERP.end;
% ECOM.dispchans = ECOM.nbchan;
% ECOM.bad = ERP.bad;
% ECOM.vidx = ERP.vidx;
% 

options = getappdata(hfig, 'options');
eventtime = ERP.event(options.eventidx).time;
EPOCH.name = [EPOCH.name '_' ERP.event(options.eventidx).name];
EPOCH.event = ERP.event(options.eventidx).name;

masks = getappdata(hfig,'masks');
nummasks = size(masks,1);

av_start = options.av_start;
av_end = options.av_end;
points = av_end - av_start + 1;
if points>ERP.points
    warndlg('The epoch is too long!');
    return;
end
EPOCH.left = av_start;
EPOCH.right = av_end;
EPOCH.points = points;
EPOCH.origin = - av_start + 1;

segments = length(eventtime);
validsegments = 0;
for i = 1:segments
    seg_start = eventtime(i) + av_start;
    seg_end = eventtime(i) + av_end;
    
    % test if it is outside the original ERP data
    if seg_start<1 | seg_end>ERP.points
        continue;
    end
    
    % test if it intersect with masks (bad signal to be removed)
    isIntsct = 0;
    for j = 1:nummasks
        if ~(seg_start>masks(j,2) | seg_end<masks(j,1))
            isIntsct = 1;
            break;
        end
    end
    
    % add the segment if it is valid
    if ~isIntsct
        validsegments = validsegments + 1;
        EPOCH.data{validsegments} = ERP.data(EPOCH.good,seg_start:seg_end);
    end
end
EPOCH.nbtrials = validsegments;

% if options.enable_bl
%     options.bl_start = min(max(1,options.bl_start),ERP.points);
%     options.bl_end= min(max(1,options.bl_end),ERP.points);
%     if options.bl_end <= options.bl_start
% %         tmp = options.bl_start;
% %         options.bl_start = options.bl_end;
% %         options.bl_end = tmp;
%         helpdlg('For baseline interval, the left limit must < right limit !');
%         return;
%     end
%     meanvalue = mean(ERP.data(:, options.bl_start:options.bl_end), 2);
%     data = data - repmat(meanvalue,1,points);
% end

ECOM = epochanalysis(EPOCH);
setappdata(hfig,'ECOM',ECOM);


% % --- Executes on button press in radiobuttonbaseline.
% function radiobuttonbaseline_Callback(hObject, eventdata, handles)
% % hObject    handle to radiobuttonbaseline (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% 
% % Hint: get(hObject,'Value') returns toggle state of radiobuttonbaseline
% hfig = gcf;
% options = getappdata(hfig, 'options');
% options.enable_bl = get(hObject,'value');
% setappdata(hfig,'options',options);


% --- Executes on button press in pb_avrged.
function pb_avrged_Callback(hObject, eventdata, handles)
% hObject    handle to pb_avrged (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
hfig = gcf;
ECOM = getappdata(hfig,'ECOM');
if isempty(ECOM)
    helpdlg('There is no averaged ERP!');
    return;
end

hfignew = figure('name', ECOM.name, 'NumberTitle', 'off');
haxes = axes;
set(haxes,'color',get(hfignew,'color'));

xlimit = ECOM.points;                  
xlabelstep = round(xlimit/10);% only display 10 labels in x axis.

options = getappdata(hfig,'options');
origin = - options.av_start + 1;

% x labels
% xlabelpositions = [0:xlabelstep:xlimit];
xlabelpositions = [1:xlabelstep:xlimit];
xlabels = (xlabelpositions-origin) ./ ECOM.srate;
xlabels = num2str(xlabels');
     
% y labels
channelmaxs = max(ECOM.data');
channelmins = min(ECOM.data');
spacing = mean(channelmaxs-channelmins);  
ylimit = (ECOM.nbchan+1)*spacing;
ylabelpositions = [0:spacing:ECOM.nbchan*spacing];    
YLabels = ECOM.labels;
YLabels = strvcat(YLabels); 
YLabels = flipud(str2mat(YLabels,' '));

set(haxes,...
      'Xlim',[0 xlimit],...
      'xtick',xlabelpositions,...% where to display the labels.
      'Ylim',[0 ylimit],...
      'YTick',ylabelpositions,...
      'YTickLabel', YLabels,...
      'XTickLabel', xlabels); % the labels to be displayed
  
axes(haxes);
xlabel('Second');
cla;        
hold on;

tmpcolor = [0.0,0.0,1.0];
for i = 1:ECOM.nbchan
    chan = ECOM.nbchan-i+1;
    plot(ECOM.data(chan,:)+i*spacing,'color', tmpcolor, 'clipping','on');
end 
  
% draw the line indicating the stimulation time
xpos = [origin, origin];
ypos = [0, ylimit];
plot(xpos, ypos, '--', 'EraseMode', 'xor', 'color', [0,0,0]);
text(double(xpos(2)),double(ypos(2)),ECOM.event, 'HorizontalAlignment','center','VerticalAlignment','bottom','Color',[0 0 0],'FontWeight','bold','FontSize',12);

axis on;
box on;


% --------------------------------------------------------------------
function menu_remove_Callback(hObject, eventdata, handles)
% hObject    handle to menu_remove (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
hfig = gcf;
masks = getappdata(hfig,'masks');
num = size(masks,1);
if num <= 0
    helpdlg('There is no mask!');
    return;
end

listidx = num2str((1:num)');
default = [];
[sel,ok] = listdlg('ListString',listidx,'Name','Remove masks','InitialValue',default);
if ok == 0 | isempty(sel)
    return;
end

masks(sel,:) = [];
setappdata(hfig,'masks',masks);
updatewindow;


% % --------------------------------------------------------------------
% function menu_leftepoch_Callback(hObject, eventdata, handles)
% % hObject    handle to menu_leftepoch (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% hfig = gcf;
% ERP = getappdata(hfig,'ERP');
% mainaxes = findobj(hfig,'tag','mainaxes'); 
% if isempty(mainaxes)
%     return;
% end
% 
% currentxlim = get(mainaxes, 'Xlim');
% currentylim = get(mainaxes, 'Ylim');
% mousepos = get(mainaxes, 'currentpoint');
% 
% % if the mouse is not in the viewing window, topography nothing.
% if mousepos(1,1) < currentxlim(1,1) | mousepos(1,1) > currentxlim(1,2)  | ...
% mousepos(1,2) < currentylim(1,1) | mousepos(1,2) > currentylim(1,2) 
%      return;
% end
% 
% axisdata = get(mainaxes, 'userdata');
% options = getappdata(hfig,'options');
% 
% currentpoint = round(mousepos(1,1) + axisdata.xlow-1);%find the nearest point.
% if currentpoint < axisdata.xlow | currentpoint > axisdata.xhigh
%     return;
% end
% % if currentpoint >= options.bl_end
% %     helpdlg('Left limit must < Right limit!');
% %     return;
% % end
% 
% currenttime = currentpoint / ERP.srate;
% options.bl_start = currentpoint;
% setappdata(hfig,'options',options);
% set(handles.baselinestart,'string',num2str(currenttime));
% 
% % draw epoch 
% bl_start = options.bl_start-axisdata.xlow +1;
% xpos = [bl_start,bl_start];
% ypos = [currentylim(1,1), currentylim(1,2)];
% leftline = findobj(hfig,'tag','leftline');
% if isempty(leftline)
%     plot(xpos, ypos, '--', 'EraseMode', 'xor', 'color', [0,0,1],'tag','leftline');
% else
%     set(leftline,'xdata',xpos,'ydata',ypos);
% end


% % --------------------------------------------------------------------
% function menu_rightepoch_Callback(hObject, eventdata, handles)
% % hObject    handle to menu_rightepoch (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% hfig = gcf;
% ERP = getappdata(hfig,'ERP');
% mainaxes = findobj(hfig,'tag','mainaxes'); 
% if isempty(mainaxes)
%     return;
% end
% 
% currentxlim = get(mainaxes, 'Xlim');
% currentylim = get(mainaxes, 'Ylim');
% mousepos = get(mainaxes, 'currentpoint');
% 
% % if the mouse is not in the viewing window, topography nothing.
% if mousepos(1,1) < currentxlim(1,1) | mousepos(1,1) > currentxlim(1,2)  | ...
% mousepos(1,2) < currentylim(1,1) | mousepos(1,2) > currentylim(1,2) 
%      return;
% end
% 
% axisdata = get(mainaxes, 'userdata');
% options = getappdata(hfig,'options');
% 
% currentpoint = round(mousepos(1,1) + axisdata.xlow-1);%find the nearest point.
% if currentpoint < axisdata.xlow | currentpoint > axisdata.xhigh
%     return;
% end
% % if currentpoint <= options.bl_start
% %     helpdlg('Right limit must > Left limit!');
% %     return;
% % end
% 
% currenttime = currentpoint / ERP.srate;
% options.bl_end = currentpoint;
% setappdata(hfig,'options',options);
% set(handles.baselineend,'string',num2str(currenttime));
% 
% % draw epoch 
% bl_end = options.bl_end-axisdata.xlow +1;
% xpos = [bl_end,bl_end];
% ypos = [currentylim(1,1), currentylim(1,2)];
% rightline = findobj(hfig,'tag','rightline');
% if isempty(rightline)
%     plot(xpos, ypos, '--', 'EraseMode', 'xor', 'color', [1,0,0],'tag','rightline');
% else
%     set(rightline,'xdata',xpos,'ydata',ypos);
% end



% --- Executes on button press in pb_filter.
function pb_filter_Callback(hObject, eventdata, handles)
% hObject    handle to pb_filter (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
hfig = gcf;
ERP = getappdata(hfig,'ERP');
ERP.data = pop_filter(ERP.data, ERP.srate);
if isempty(ERP.data)
    return;
end
setappdata(hfig,'ERP',ERP);
clear ERP;
initwindow;

% --- Executes on button press in pb_reref.
function pb_reref_Callback(hObject, eventdata, handles)
% hObject    handle to pb_reref (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
hfig = gcf;
ERP = getappdata(hfig,'ERP');
list = 1:ERP.nbchan;
if ~isempty(ERP.bad)
    list(ERP.bad) = [];
end
labels = ERP.labels(list);
default = [];
[sel,ok] = listdlg('ListString',labels,'Name','Re-reference Channels','InitialValue',default);
if ok == 0 | isempty(sel)
    return;
end

selected = list(sel);
ct = 0;
h = waitbar(0,'Re-referencing, please wait...');
for i = 1: ERP.points
   reference = mean(ERP.data(selected,i));
   ERP.data(:,i) = ERP.data(:,i) - reference;
   ct = ct + 1; 
   if ~mod(ct, 10)
      waitbar(ct/ERP.points);
   end
end
waitbar(1);
close(h);
setappdata(hfig,'ERP',ERP);
clear ERP;
updatewindow;

% --- Executes on button press in pb_rejchan.
function pb_rejchan_Callback(hObject, eventdata, handles)
% hObject    handle to pb_rejchan (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
hfig = gcf;
ERP = getappdata(hfig,'ERP');
default = ERP.bad;
[sel,ok] = listdlg('ListString',ERP.labels,'Name','Reject Channels','InitialValue',default);
if ok == 0 
    return;
end

ERP.bad = sel;
if ~isempty(sel)
    ERP.vidx(sel) = [];
end
setappdata(hfig,'ERP',ERP);
updatewindow;


% --------------------------------------------------------------------
function menu_bad_Callback(hObject, eventdata, handles)
% hObject    handle to menu_bad (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
hfig = gcf;
ERP = getappdata(hfig,'ERP');
mainaxes = findobj(hfig,'tag','mainaxes'); 
if isempty(mainaxes)
    return;
end

currentylim = get(mainaxes, 'Ylim');
mousepos = get(mainaxes, 'currentpoint');
axisdata = get(mainaxes, 'userdata');
currentchannel = round( (currentylim(1,2) - mousepos(1,2) ) / axisdata.spacing);%find the nearest channel.
currentchannel = currentchannel + ERP.start - 1;
if currentchannel < ERP.start | currentchannel > ERP.end
     return;
end

idx1 = currentchannel;

idx2 = find(ERP.bad==idx1); % if it is a bad chnnel
idx3 = find(ERP.vidx==idx1);

if isempty(idx2) && isempty(idx3)
    helpdlg([upper(ERP.labels{currentchannel}) ' is an automatically processed channel !']);
    return;
end

if isempty(idx2) % is good channel, change to bad
    ERP.bad(length(ERP.bad)+1) = idx1;
    ERP.bad = sort(ERP.bad);
    ERP.vidx(idx3) = [];    % remove it from good channels
else % is bad channel, change to good
    ERP.bad(idx2) = [];
    ERP.vidx(length(ERP.vidx)+1) = idx1; % add it to good channels
    ERP.vidx = sort(ERP.vidx);      
end

setappdata(hfig,'ERP',ERP);
updatewindow;

% --------------------------------------------------------------------
function menu_interpolate_Callback(hObject, eventdata, handles)
% hObject    handle to menu_interpolate (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
hfig = gcf;
ERP = getappdata(hfig,'ERP');
if isempty(ERP.bad)
    helpdlg('There is no bad channel !');
    return;
end

type = upper(ERP.type);
if isequal(type,'EEG')  % EEG interpolation
    X(:,1) = cell2mat({ERP.locations(ERP.vidx).X});
    X(:,2) = cell2mat({ERP.locations(ERP.vidx).Y});
    X(:,3) = cell2mat({ERP.locations(ERP.vidx).Z});

    numbad = length(ERP.bad);
    XI(:,1) = cell2mat({ERP.locations(ERP.bad).X});
    XI(:,2) = cell2mat({ERP.locations(ERP.bad).Y});
    XI(:,3) = cell2mat({ERP.locations(ERP.bad).Z});

    n = 4;
    for k = 1:numbad
        idx = ERP.bad(k);
        dists = sqrt( (X(:,1)-XI(k,1)).^2 + (X(:,2)-XI(k,2)).^2 + (X(:,3)-XI(k,3)).^2);
        [dists,idxs] = sort(dists);
        idxs_N =  ERP.vidx(idxs(1:n));
        dists_N = (dists(1:n)).^2;
        coefs_N = 1 ./ dists_N;
        coefs_N = coefs_N / sum(coefs_N);

        ERP.data(idx,:) = coefs_N' * ERP.data(idxs_N,:);
    end

    ERP.vidx = sort([ERP.vidx, ERP.bad]);
    ERP.bad = [];
    data = ERP.data(ERP.vidx,:);
    ERP.min = min(min(data));
    ERP.max = max(max(data));
elseif isequal(type,'ECOG') % ECOG interpolation
    distrib = reshape([1:ERP.nbchan],ERP.size);

    numvidx = length(ERP.vidx);
    X = zeros(numvidx,2);
    for k = 1:numvidx
        idx = ERP.vidx(k);
        [X(k,1), X(k,2)] = find(distrib==idx);
    end

    numbad = length(ERP.bad);
    XI = zeros(numbad,2);
    
    n = 4;
    for k = 1:numbad
        idx = ERP.bad(k);
        [XI(k,1), XI(k,2)] = find(distrib==idx);

        dists = sqrt( (X(:,1)-XI(k,1)).^2 + (X(:,2)-XI(k,2)).^2);
        [dists,idxs] = sort(dists);
        idxs_N =  ERP.vidx(idxs(1:n));
        dists_N = (dists(1:n)).^2;
        coefs_N = 1 ./ dists_N;
        coefs_N = coefs_N / sum(coefs_N);

        ERP.data(idx,:) = coefs_N' * ERP.data(idxs_N,:);
    end

    ERP.vidx = 1:ERP.nbchan;
    ERP.bad = [];
    ERP.min = min(min(ERP.data));
    ERP.max = max(max(ERP.data));
elseif isequal(type,'MEG') % MEG interpolation
    X(:,1) = ERP.locations.italybrain(ERP.vidx,1);
    X(:,2) = ERP.locations.italybrain(ERP.vidx,2);
    X(:,3) = ERP.locations.italybrain(ERP.vidx,3);

    numbad = length(ERP.bad);
    XI(:,1) = ERP.locations.italybrain(ERP.bad,1);
    XI(:,2) = ERP.locations.italybrain(ERP.bad,2);
    XI(:,3) = ERP.locations.italybrain(ERP.bad,3);

    n = 4;
    for k = 1:numbad
        idx = ERP.bad(k);
        dists = sqrt( (X(:,1)-XI(k,1)).^2 + (X(:,2)-XI(k,2)).^2 + (X(:,3)-XI(k,3)).^2);
        [dists,idxs] = sort(dists);
        idxs_N =  ERP.vidx(idxs(1:n));
        dists_N = (dists(1:n)).^2;
        coefs_N = 1 ./ dists_N;
        coefs_N = coefs_N / sum(coefs_N);

        ERP.data(idx,:) = coefs_N' * ERP.data(idxs_N,:);
    end

    ERP.vidx = sort([ERP.vidx, ERP.bad]);
    ERP.bad = [];
    data = ERP.data(ERP.vidx,:);
    ERP.min = min(min(data));
    ERP.max = max(max(data));
end
    
setappdata(hfig,'ERP',ERP);
updatewindow;


% --------------------------------------------------------------------
function EPOCH = buildEpoch(ERP)
EPOCH = ecom_initialize;
good = 1:ERP.nbchan;
good(ERP.bad) = [];

EPOCH.good = good;
EPOCH.bad = ERP.bad;
EPOCH.name = ERP.name;
EPOCH.type = ERP.type;
EPOCH.nbchan = length(good);
EPOCH.unit = ERP.unit;
EPOCH.srate = ERP.srate;
EPOCH.labeltype = ERP.labeltype;
EPOCH.labels = ERP.labels(good);
if isequal(upper(ERP.type),'MEG')
    EPOCH.locations  = ERP.locations;
    EPOCH.locations.italybrain(EPOCH.bad,:) = [];
    EPOCH.locations.colinbrain(EPOCH.bad,:) = [];
    EPOCH.locations.surf = getCapSurf(EPOCH.locations.italybrain);
else
    EPOCH.locations  = ERP.locations(good);
end
EPOCH.data = {};
EPOCH.nbtrials = 1;
EPOCH.vidx = 1:EPOCH.nbchan;
if isequal(upper(ERP.type),'ECOG')
    EPOCH.size = ERP.size;
end

% remove invalid channels from EPOCH.vidx
invalid = 1:ERP.nbchan;
valid = [ERP.vidx,ERP.bad];
invalid(valid) = [];
if ~isempty(invalid) % have invalid channels
    len = length(invalid);
    for i = 1:len
        idx(i) = find(good==invalid(i));
    end
    EPOCH.vidx(idx) = [];
end
    


% % --------------------------------------------------------------------
% function menu_clip_Callback(hObject, eventdata, handles)
% % hObject    handle to menu_clip (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% hfig = gcf;
% ERP = getappdata(hfig,'ERP');
% if isempty(ERP)
%     return;
% end
% 
% masks = getappdata(hfig,'masks');
% num = size(masks,1);
% if num <= 0
%     helpdlg('There is no mask!');
%     return;
% end
% 
% if num > 1
%     helpdlg('Only one mask is allowed!');
%     return;
% end
% 
% enum = length(ERP.event);
% ct = 0;
% h = waitbar(0,'Clipping, please wait...');
% for i = 1:num
%     L = masks(i,1);
%     R = masks(i,2);
%     seg = R-L+1;
%     ERP.data(:,L:R) = [];
%     ERP.points = ERP.points - seg;
%     for j = 1:enum
%         idx = find(ERP.event(j).time>=L & ERP.event(j).time<=R);
%         ERP.event(j).time(idx) = [];
%         idx = find(ERP.event(j).time>R);
%         ERP.event(j).time(idx) = ERP.event(j).time(idx) - seg;
%     end
%     ct = ct + 1; 
%     waitbar(ct/num);
% end
% waitbar(1);
% close(h);
% 
% masks = [];
% setappdata(hfig,'masks',masks);
% setappdata(hfig,'ERP',ERP);
% 
% updatewindow;
% 
% % --------------------------------------------------------------------
% function menu_export_Callback(hObject, eventdata, handles)
% % hObject    handle to menu_export (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% hfig = gcf;
% ERP = getappdata(hfig,'ERP');
% if isempty(ERP)
%     return;
% end
% 
% [name, pathstr] = uiputfile('*.mat','Save Current ERP Data');
% if name==0
%     return;
% end
% addpath(pathstr);
% Fullfilename=fullfile(pathstr,name);         
% save(Fullfilename, 'ERP');



% % --------------------------------------------------------------------
% function menu_left_Callback(hObject, eventdata, handles)
% % hObject    handle to menu_left (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% hfig = gcf;
% options = getappdata(hfig,'options');
% 
% options.left = getappdata(hfig,'current');
% 
% if  options.right <= options.left
%     helpdlg('Right limit must > Left limit!');
%     return;
% end
% setappdata(hfig,'options',options);
% 
% % draw epoch 
% mainaxes = findobj(hfig,'tag','mainaxes');
% axisdata = get(mainaxes, 'userdata');
% currentylim = get(mainaxes, 'Ylim');
% left = options.left-axisdata.xlow +1;
% xpos = [left,left];
% ypos = [currentylim(1,1), currentylim(1,2)];
% leftline = findobj(hfig,'tag','leftline');
% if isempty(leftline)
%     plot(xpos, ypos, '--', 'EraseMode', 'xor', 'color', [0,0,1],'tag','leftline');
% else
%     set(leftline,'xdata',xpos,'ydata',ypos);
% end
% 
% % --------------------------------------------------------------------
% function menu_right_Callback(hObject, eventdata, handles)
% % hObject    handle to menu_right (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% hfig = gcf;
% options = getappdata(hfig,'options');
% 
% options.right = getappdata(hfig,'current');
% 
% if  options.right <= options.left
%     helpdlg('Right limit must > Left limit!');
%     return;
% end
% setappdata(hfig,'options',options);
% 
% % draw epoch 
% mainaxes = findobj(hfig,'tag','mainaxes');
% axisdata = get(mainaxes, 'userdata');
% currentylim = get(mainaxes, 'Ylim');
% right = options.right-axisdata.xlow +1;
% xpos = [right,right];
% ypos = [currentylim(1,1), currentylim(1,2)];
% rightline = findobj(hfig,'tag','rightline');
% if isempty(rightline)
%     plot(xpos, ypos, '--', 'EraseMode', 'xor', 'color', [1,0,0],'tag','rightline');
% else
%     set(rightline,'xdata',xpos,'ydata',ypos);
% end
% 
% % --------------------------------------------------------------------
% function menu_rm_interval_Callback(hObject, eventdata, handles)
% % hObject    handle to menu_rm_interval (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% hfig = gcf;
% ERP = getappdata(hfig,'ERP');
% if isempty(ERP)
%     return;
% end
% 
% options = getappdata(hfig,'options');
% if options.left==1 && options.right==ERP.points
%     helpdlg('Please set interval!');
%     return;
% end
% 
% options.left = max(1,min(options.left,ERP.points));
% options.right = max(1,min(options.right,ERP.points));
% 
% enum = length(ERP.event);
% L = options.left;
% R = options.right;
% seg = R-L+1;
% ERP.data(:,L:R) = [];
% ERP.points = ERP.points - seg;
% for j = 1:enum
%     idx = find(ERP.event(j).time>=L & ERP.event(j).time<=R);
%     ERP.event(j).time(idx) = [];
%     idx = find(ERP.event(j).time>R);
%     ERP.event(j).time(idx) = ERP.event(j).time(idx) - seg;
% end
% 
% setappdata(hfig,'ERP',ERP);
% 
% options.left = max(1,min(options.left,ERP.points));
% options.right = max(1,min(options.right,ERP.points));
% setappdata(hfig,'options',options);
% 
% initwindow;
% 
% % --------------------------------------------------------------------
% function menu_keep_interval_Callback(hObject, eventdata, handles)
% % hObject    handle to menu_keep_interval (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% hfig = gcf;
% ERP = getappdata(hfig,'ERP');
% if isempty(ERP)
%     return;
% end
% 
% options = getappdata(hfig,'options');
% if options.left==1 && options.right==ERP.points
%     helpdlg('Please set interval!');
%     return;
% end
% 
% options.left = max(1,min(options.left,ERP.points));
% options.right = max(1,min(options.right,ERP.points));
% 
% enum = length(ERP.event);
% L = options.left;
% R = options.right;
% seg = R-L+1;
% ERP.data = ERP.data(:,L:R);
% ERP.points = seg;
% for j = 1:enum
%     idx = find(ERP.event(j).time>=L & ERP.event(j).time<=R);
%     ERP.event(j).time = ERP.event(j).time(idx) - L + 1;
% end
% setappdata(hfig,'ERP',ERP);
% 
% options.left = max(1,min(options.left,ERP.points));
% options.right = max(1,min(options.right,ERP.points));
% setappdata(hfig,'options',options);
% 
% initwindow;
% 
% % --------------------------------------------------------------------
% function menu_export_Callback(hObject, eventdata, handles)
% % hObject    handle to menu_export (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% hfig = gcf;
% ERP = getappdata(hfig,'ERP');
% if isempty(ERP)
%     return;
% end
% 
% [name, pathstr] = uiputfile('*.mat','Save Current ERP Data');
% if name==0
%     return;
% end
% addpath(pathstr);
% Fullfilename=fullfile(pathstr,name);         
% save(Fullfilename, 'ERP');

