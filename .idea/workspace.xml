<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="a617b348-6cb2-45cc-a198-13230a830d13" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/main_SA.py" beforeDir="false" afterPath="$PROJECT_DIR$/main_SA.py" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/main_SA.py">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="383">
              <caret line="184" lean-forward="true" selection-start-line="184" selection-end-line="184" />
              <folding>
                <element signature="e#64#93#0" expanded="true" />
                <element signature="e#1987#3266#0" />
                <element signature="e#3303#3716#0" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>patient</find>
      <find>sensorList</find>
      <find>sensor</find>
      <find>load_csv</find>
      <find>output</find>
      <find>path_h</find>
      <find>path</find>
      <find>*</find>
      <find>result_name</find>
      <find>path_output</find>
      <find>sensor_name</find>
      <find>sensors</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/main_SA.py" />
      </list>
    </option>
  </component>
  <component name="ProjectConfigurationFiles">
    <option name="files">
      <list>
        <option value="$PROJECT_DIR$/.idea/SignalAnalysis.iml" />
        <option value="$PROJECT_DIR$/.idea/misc.xml" />
        <option value="$PROJECT_DIR$/.idea/modules.xml" />
        <option value="$PROJECT_DIR$/.idea/vcs.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="y" value="23" />
    <option name="width" value="840" />
    <option name="height" value="988" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane" />
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
  </component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="main_SA" type="PythonConfigurationType" factoryName="Python" temporary="true">
      <module name="SignalAnalysis" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/main_SA.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Python.main_SA" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="95b732f0-48ee-4647-aebf-06328e5c974f" name="Default Changelist" comment="" />
      <created>1561940946515</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1561940946515</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="23" width="1680" height="988" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.12296564" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Favorites" order="2" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info active="true" anchor="bottom" id="Run" order="2" sideWeight="0.4996986" visible="true" weight="0.32924107" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.3984375" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Version Control" order="7" />
      <window_info anchor="bottom" id="Terminal" order="8" />
      <window_info anchor="bottom" id="Event Log" order="9" sideWeight="0.50030136" side_tool="true" weight="0.32924107" />
      <window_info anchor="bottom" id="Python Console" order="10" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
    </layout>
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>plt.rcParams[&quot;figure.figsize&quot;] = (18, 2)
fig = plt.figure()
for j, ay in enumerate(exercise_index):
    nowP = fig.add_subplot(1, exerciseNum, j + 1)
    nowY_head_normal = []
    nowY_head_patient = []
    nowY_waist_normal = []
    nowY_waist_patient = []
    nowY = []
    nowX = ['normal', 'patient']
    for w in range(len(sensor_name)):
        if ('7756' == sensor_name[w]) &amp; (ay == exercise_num[w]):
            if ('normal' == subject_name[w]):
                nowY_head_normal.append(average_data[w])
            else:
                nowY_head_patient.append(average_data[w])
        if ('CD82' == sensor_name[w]) &amp; (ay == exercise_num[w]):
            if ('normal' == subject_name[w]):
                nowY_waist_normal.append(average_data[w])
            else:
                nowY_waist_patient.append(average_data[w])
    nowY.append(np.mean(nowY_head_normal) / np.mean(nowY_waist_normal))
    nowY.append(np.mean(nowY_head_patient) / np.mean(nowY_waist_patient))
    nowP.bar(nowX, nowY)
    plt.ylim(0.5, 1)
# plt.show()</expression-string>
        <language-id>Python</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>plt.rcParams[&quot;figure.figsize&quot;] = (18, 2)
fig = plt.figure()
for j, ay in enumerate(exercise_index):
    nowP = fig.add_subplot(1, exerciseNum, j + 1)
    nowY_head_normal = []
    nowY_head_patient = []
    nowY_waist_normal = []
    nowY_waist_patient = []
    nowY = []
    nowX = ['normal', 'patient']
    for w in range(len(sensor_name)):
        if ('7756' == sensor_name[w]) &amp; (ay == exercise_num[w]):
            if ('normal' == subject_name[w]):
                nowY_head_normal.append(average_data[w])
            else:
                nowY_head_patient.append(average_data[w])
        if ('CD82' == sensor_name[w]) &amp; (ay == exercise_num[w]):
            if ('normal' == subject_name[w]):
                nowY_waist_normal.append(average_data[w])
            else:
                nowY_waist_patient.append(average_data[w])
    nowY.append(np.mean(nowY_head_normal) / np.mean(nowY_waist_normal))
    nowY.append(np.mean(nowY_head_patient) / np.mean(nowY_waist_patient))
    nowP.bar(nowX, nowY)
    plt.ylim(0, 2)
# plt.show()</expression-string>
        <language-id>Python</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>plt.rcParams[&quot;figure.figsize&quot;] = (18, 2)
fig = plt.figure()
for j, ay in enumerate(exercise_index):
    nowP = fig.add_subplot(1, exerciseNum, j + 1)
    nowY_head_normal = []
    nowY_head_patient = []
    nowY_waist_normal = []
    nowY_waist_patient = []
    nowY = []
    nowX = ['normal', 'patient']
    for w in range(len(sensor_name)):
        if ('7756' == sensor_name[w]) &amp; (ay == exercise_num[w]):
            if ('normal' == subject_name[w]):
                nowY_head_normal.append(average_data[w])
            else:
                nowY_head_patient.append(average_data[w])
        if ('CD82' == sensor_name[w]) &amp; (ay == exercise_num[w]):
            if ('normal' == subject_name[w]):
                nowY_waist_normal.append(average_data[w])
            else:
                nowY_waist_patient.append(average_data[w])
    nowY.append(np.mean(nowY_head_normal) / np.mean(nowY_waist_normal))
    nowY.append(np.mean(nowY_head_patient) / np.mean(nowY_waist_patient))
    nowP.bar(nowX, nowY)
    #plt.ylim(min_value, max_value)
# plt.show()</expression-string>
        <language-id>Python</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>plt.rcParams[&quot;figure.figsize&quot;] = (18, 2)
fig = plt.figure()
for j, ay in enumerate(exercise_index):
    nowP = fig.add_subplot(1, exerciseNum, j + 1)
    nowY_head_normal = []
    nowY_head_patient = []
    nowY_waist_normal = []
    nowY_waist_patient = []
    nowY = []
    nowX = ['normal', 'patient']
    for w in range(len(sensor_name)):
        if ('7756' == sensor_name[w]) &amp; (ay == exercise_num[w]):
            if ('normal' == subject_name[w]):
                nowY_head_normal.append(average_data[w])
            else:
                nowY_head_patient.append(average_data[w])
        if ('CD82' == sensor_name[w]) &amp; (ay == exercise_num[w]):
            if ('normal' == subject_name[w]):
                nowY_waist_normal.append(average_data[w])
            else:
                nowY_waist_patient.append(average_data[w])
    nowY.append(np.mean(nowY_head_normal) / np.mean(nowY_waist_normal))
    nowY.append(np.mean(nowY_head_patient) / np.mean(nowY_waist_patient))
    nowP.bar(nowX, nowY)
    plt.ylim(min_value, max_value)
# plt.show()</expression-string>
        <language-id>Python</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>plt.rcParams[&quot;figure.figsize&quot;] = (18, 2)
fig = plt.figure()
for j, ay in enumerate(exercise_index):
    nowP = fig.add_subplot(1, exerciseNum, j + 1)
    nowY = []
    nowX = []
    for w in range(len(sensor_name)):
        if ('7756' == sensor_name[w]) &amp; (ay == exercise_num[w]):
            nowY.append(average_data[w])
            nowX.append(subject_name[w])
        if ('CD82' == sensor_name[w]) &amp; (ay == exercise_num[w]):
            nowY.append(-average_data[w])
            nowX.append(subject_name[w])
    nowP.bar(nowX, nowY)
    plt.ylim(min_value, max_value)
# plt.show()
saveDir = os.path.join(path_output, (&quot;HeadWaist&quot; + args.result_name))
fig.savefig(saveDir)</expression-string>
        <language-id>Python</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>fig = plt.figure()
for j, ay in enumerate(exercise_index):
    nowP = fig.add_subplot(1, exerciseNum, j + 1)
    nowY = []
    nowX = []
    for w in range(len(sensor_name)):
        if ('7756' == sensor_name[w]) &amp; (ay == exercise_num[w]):
            nowY.append(subject_name[w])
            nowX.append(subject_name[w])
        if ('CD82' == sensor_name[w]) &amp; (ay == exercise_num[w]):
            nowY.append(-subject_name[w])
            nowX.append(subject_name[w])
    nowP.bar(nowX, nowY)
    plt.ylim(min_value, max_value)</expression-string>
        <language-id>Python</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>range(len(sensor_name))</expression-string>
        <language-id>Python</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>sensor_name[1] == 'CD82'</expression-string>
        <language-id>Python</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>sensor_name[1] == '774A'</expression-string>
        <language-id>Python</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$USER_HOME$/anaconda3/lib/python3.7/site-packages/cffi/api.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="45">
          <caret line="3" selection-start-line="3" selection-end-line="3" />
        </state>
      </provider>
    </entry>
    <entry file="file://$APPLICATION_HOME_DIR$/helpers/pydev/_pydev_imps/_pydev_execfile.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="255">
          <caret line="17" selection-start-line="17" selection-end-line="17" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/main_SA.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="383">
          <caret line="184" lean-forward="true" selection-start-line="184" selection-end-line="184" />
          <folding>
            <element signature="e#64#93#0" expanded="true" />
            <element signature="e#1987#3266#0" />
            <element signature="e#3303#3716#0" />
          </folding>
        </state>
      </provider>
    </entry>
  </component>
</project>